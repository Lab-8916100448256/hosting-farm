//! `SeaORM` Entity. Generated by `sea-orm-codegen` 1.1.7

use loco_rs::model::{ActiveModelBehavior, ModelError};
use sea_orm::{entity::prelude::*, sea_query::OnConflict, ActiveValue::Set, ConnectionTrait, QuerySelect};
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "teams")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    #[sea_orm(unique)]
    pub pid: Uuid,
    #[sea_orm(unique)]
    pub name: String,
    pub description: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::team_memberships::Entity")]
    TeamMemberships,
}

impl Related<super::team_memberships::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamMemberships.def()
    }
}

// NOTE: Explicitly implementing ActiveModelBehavior here
// because the derive macro doesn't seem to handle all cases automatically,
// especially regarding timestamps and PIDs.
#[async_trait::async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        tracing::debug!("Team ActiveModelBehavior::before_save called (insert: {})", insert);
        if insert {
            if self.pid.is_not_set() {
                self.pid = Set(Uuid::new_v4());
                tracing::debug!("Setting new PID for team: {:?}", self.pid);
            }
            let now = chrono::Utc::now(); // Use DateTime<Utc>
            if self.created_at.is_not_set() {
                self.created_at = Set(now.into()); // Convert to DateTimeWithTimeZone
                tracing::debug!("Setting created_at for team: {:?}", self.created_at);
            }
            if self.updated_at.is_not_set() {
                self.updated_at = Set(now.into()); // Convert to DateTimeWithTimeZone
                tracing::debug!("Setting updated_at for team: {:?}", self.updated_at);
            }
        } else {
            // Only update `updated_at` if it's an update operation
            let now = chrono::Utc::now();
            self.updated_at = Set(now.into()); // Convert to DateTimeWithTimeZone
            tracing::debug!("Updating updated_at for team: {:?}", self.updated_at);

            // Ensure created_at is not modified on update
            if self.created_at.is_set() {
                 tracing::warn!("Attempted to modify created_at during team update. Resetting to Unchanged.");
                 self.created_at = ActiveValue::Unchanged(self.created_at.as_ref().clone());
            }
             // Ensure pid is not modified on update
             if self.pid.is_set() {
                 tracing::warn!("Attempted to modify pid during team update. Resetting to Unchanged.");
                 self.pid = ActiveValue::Unchanged(self.pid.as_ref().clone());
             }
        }

        Ok(self)
    }

     // Example of after_save if needed
     // async fn after_save<C>(self, _db: &C, insert: bool) -> Result<Self, DbErr>
     // where
     //     C: ConnectionTrait,
     // {
     //     tracing::debug!("Team ActiveModelBehavior::after_save called (insert: {})", insert);
     //     Ok(self)
     // }
}
