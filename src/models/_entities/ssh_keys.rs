//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7
// Manually updated based on migration m20250416_052930_ssh_keys.rs

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "ssh_keys")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: i32, // Added
    
    pub label: String, // Added
    #[sea_orm(column_type = "Text")]
    pub public_key: String,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade", // Match migration
        on_delete = "Cascade" // Match migration
    )]
    Users,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

// ActiveModelBehavior implementation moved to src/models/ssh_keys.rs
// #[async_trait::async_trait]
// impl ActiveModelBehavior for ActiveModel {
//     async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
//     where
//         C: ConnectionTrait,
//     {
//          // ... implementation ...
//     }
// }
