//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7
//! DO NOT MODIFY THIS FILE MANUALLY - YOUR CHANGES WILL BE OVERWRITTEN BY REGENERATION
//! Instead, add the `status` field in the `Model` struct and re-run the generator if needed,
//! or manage the schema purely through migrations. For this task, we only modify the Model struct
//! and rely on the migration to handle the DB schema. The derive macro handles the rest.

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub pid: Uuid,
    #[sea_orm(unique)]
    pub email: String,
    pub password: Option<String>, // Password CAN be null (e.g., magic link login)
    #[sea_orm(unique)]
    pub api_key: Option<String>, // API Key is nullable
    #[sea_orm(unique)] // Added unique constraint via migration
    pub name: String,
    pub reset_token: Option<String>,
    pub reset_sent_at: Option<DateTimeWithTimeZone>,
    pub email_verification_token: Option<String>,
    pub email_verification_sent_at: Option<DateTimeWithTimeZone>,
    pub email_verified_at: Option<DateTimeWithTimeZone>,
    pub magic_link_token: Option<String>,
    pub magic_link_expiration: Option<DateTimeWithTimeZone>,
    pub pgp_verification_token: Option<String>,
    pub pgp_verified_at: Option<DateTimeWithTimeZone>, // Should be Option<DateTimeWithTimeZone> for consistency
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub pgp_key: Option<String>,
    // Added field for user approval status - the migration handles the DB default.
    // DeriveEntityModel will automatically add this to the Column enum.
    pub status: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ssh_keys::Entity")]
    SshKeys,
    #[sea_orm(has_many = "super::team_memberships::Entity")]
    TeamMemberships,
}

// DeriveEntityModel automatically implements Related<...> for relations defined above
impl Related<super::ssh_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SshKeys.def()
    }
}

impl Related<super::team_memberships::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamMemberships.def()
    }
}

// NOTE: DeriveEntityModel automatically implements ActiveModelBehavior.
// Custom logic like password hashing is handled in the ActiveModelBehavior implementation
// in src/models/users.rs.
