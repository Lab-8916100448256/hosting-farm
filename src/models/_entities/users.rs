//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub pid: Uuid,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    #[sea_orm(unique)]
    pub api_key: String,
    pub name: String,
    pub reset_token: Option<String>,
    pub reset_sent_at: Option<DateTimeWithTimeZone>,
    pub email_verification_token: Option<String>,
    pub email_verification_sent_at: Option<DateTimeWithTimeZone>,
    pub email_verified_at: Option<DateTimeWithTimeZone>,
    pub magic_link_token: Option<String>,
    pub magic_link_expiration: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub pgp_key: Option<String>,
    pub pgp_email_verification_token: Option<String>,
}

impl std::fmt::Debug for Model {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("Model")
            .field("id", &self.id)
            .field("pid", &self.pid)
            .field("email", &self.email)
            .field("password", &self.password)
            .field("api_key", &self.api_key)
            .field("name", &self.name)
            .field("reset_token", &self.reset_token)
            .field("reset_sent_at", &self.reset_sent_at)
            .field("email_verification_token", &self.email_verification_token)
            .field(
                "email_verification_sent_at",
                &self.email_verification_sent_at,
            )
            .field("email_verified_at", &self.email_verified_at)
            .field("magic_link_token", &self.magic_link_token)
            .field("magic_link_expiration", &self.magic_link_expiration)
            .field("created_at", &self.created_at)
            .field("updated_at", &self.updated_at)
            .field("pgp_key", &self.pgp_key)
            .finish()
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ssh_keys::Entity")]
    SshKeys,
    #[sea_orm(has_many = "super::team_memberships::Entity")]
    TeamMemberships,
}

impl Related<super::ssh_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SshKeys.def()
    }
}

impl Related<super::team_memberships::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TeamMemberships.def()
    }
}
