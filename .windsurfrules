1. **UI Flow**
   - When implementing user interfaces always use server-side rendering with HTMX
   - Make minimal usage of javascript, primarily for enhancing HTMX functionality
   - Always prefer using HTMX and Hyperscript over adding custom javascript to the front-end
2  **project structure**
   - the project structure follows the classic loco-rs framework strucure
   - The tera templates for the views are placed in assets/views/
3. **HTML Pages generation**
   - Always use Tera templates for producing HTML
   - Use Tailwind CSS for styling.
4. **general coding best practices** 
   - When generating code, prioritize readability and maintainability. 
   - Use clear and descriptive variable names, 
   - avoid complex logic without proper documentation.
   - commit your changes to git regularly
5. **Test and commit after rust code modifications**
   - Always run `cargo check` and `cargo test` after modifying or adding Rust code to check for compilation errors and unit test failures. Fix any compilation error and unit test failure that are generated. Then test again. Iterate until there are no more error or unit test failure.
   - unless directly instructed to do so, do not commit the changes to git if there are any compilation error or unit test failure
6. **Debuggin issues that require human interaction with the application**
   - If testing by human interaction is needed to better understand an issue or to verify that a bug fix or new feature implementation works as expected, do not run the application yourself. Ask me to do that and to provide you with the results.
7. **Use loco-rs generate features**
   - To generate a new entity use `cargo loco generate model`
   - To generate a new database migration use `cargo loco generate migration`
   - To generate a new controller use `cargo loco generate controller`
   - To generate a new task use `cargo loco generate task`
   - To generate a new scheduler use `cargo loco generate scheduler`
   - To generate a new worker use `cargo loco generate worker`
   - To generate a new mailer use `cargo loco generate mailer`
   - To generate a full CRUD scaffold with model, controller and API endpoints use `cargo loco generate scaffold`
8. **API Endpoints**
   - All API endpoints MUST be prefixed with `/api/`
   - API endpoints MUST return JSON responses
   - API endpoints MUST be defined in files under `src/controllers/` that end with `_api.rs`
   - API endpoints MUST NOT render HTML templates
   - API endpoints MUST use `format::json()` for responses
   - API endpoints MUST handle errors by returning appropriate HTTP status codes with JSON responses
9. **Human-Facing Endpoints**
   - Human-facing endpoints MUST NOT be prefixed with `/api/`
   - Human-facing endpoints MUST return either an HTML responses or an HTMX redirect through HX_Redirect or HX_Location header.
   - Human-facing endpoints MUST be defined in files under `src/controllers/` that end with `_pages.rs`.
   - Human-facing endpoints MUST use for response an HTML viewhandler .
   - Human-facing endpoints handlers MUST never handle errors by returning an Error type. A normal HTML response with an error messages must be returned instead. Depending on the cases it can be : 
     - A full error page including an error messages in the places that cannot be rendered because of the failure for a standard endpoint that is serving non AJAX requests, using the template assets/views/error_page.html
     - an HTMX error fragment that will be inserted into an error container in the page from where the endpoint was called, for endpoints are serving AJAX requests. 
   - Human-facing endpoints that are not returning any html fragment or full page MUST redirect to appropriate pages after successful actions. 
   - For implementing a redirect in an html controller handler, the utility function `redirect(url: &str, headers: HeaderMap) -> Result<Response>` in `src/views/mod.rs` MUST be used.
- View rendering MUST not be implemented using any custom template rendering code that would directly call the Tera engine. There are utility functions that are doing that in src/views/mod.rs for normal pages and HTMX fragments as well as for error cases described above.
- Human-facing endpoints MUST use the custom authentication middleware of `auth_no_error` module to extract the authentication data from the requests
- Authenticated Human-facing endpoints MUST handle gracefully the case of a user calling them without being authenticated by redirecting the user to the login page. Once successfuly logged-in the user SHOULD be redirected to the endpoint he originaly called.
10. **Controller routes**
  - In controller routes, path parameters MUST use curly braces ({}), not a colon (:).

